#include <Arduino.h>
#include <U8g2lib.h>

// U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R2, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 22, /* data=*/ 21);   // ESP32 Thing, HW I2C with pin remapping
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R2, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 22, /* data=*/ 21);   // ESP32 Thing, HW I2C with pin remapping
// 

#define COUNT(x)  sizeof(x)/sizeof(*x)


void setup() {
  u8g2.begin();

  
  u8g2.setFont(u8g2_font_ncenB08_tr);
  u8g2.drawStr(0,10,"Hello World!");

  u8g2.sendBuffer();
  
}

const char *txtMENU[] = {
    "LED",
    "BUZZER",
    "OLED",
    "BUTTON",
    "POTENTIOMETER",
    "LIGHT",
    "SOUND",
    "TEMP. & HUMIDITY",
    "AIR PRESSURE",
    "3-AXIS ACCELEMETER"
};

const char *dscMENU[] = {
    "BLINKING LED",
    "PLAYING GAME MELODIES",
    "SHOWING A 3D CUBE EFFECT",
    "COUNTING BUTTON PRESSES",
    "MODIFYING CONTRAST LEVEL",
    "",
    "",
    "",
    "",
    "MOVING A BALL BY YOURSELF"
};

const byte itemsMENU = COUNT(txtMENU);

const unsigned char xMenuUp[]     U8X8_PROGMEM = { /*16x16px*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xe0, 0x01, 0xf0, 0x03, 0x38, 0x07, 0x1c, 0x0e, 0x0e, 0x1c, 0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const unsigned char xMenuDown[]   U8X8_PROGMEM = { /*16x16px*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x1c, 0x0e, 0x38, 0x07, 0xf0, 0x03, 0xe0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const unsigned char xMenuLeft[]   U8X8_PROGMEM = { /*10x10px*/ 0xe0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x70, 0x00, 0xe0, 0x00 };
const unsigned char xMenuRight[]  U8X8_PROGMEM = { /*10x10px*/ 0x1c, 0x00, 0x38, 0x00, 0x70, 0x00, 0xe0, 0x00, 0xc0, 0x01, 0xc0, 0x01, 0xe0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1c, 0x00 };



const unsigned char xbmMENU[itemsMENU][32] U8X8_PROGMEM = //16x16px
{
    { 0x00, 0x00, 0xe0, 0x01, 0xe0, 0x01, 0x60, 0x3f, 0x7f, 0x7f, 0x7f, 0xc1, 0x60, 0x81, 0x60, 0x8f, 0x60, 0x8f, 0x60, 0x81, 0x7f, 0xc1, 0x7f, 0x7f, 0x60, 0x3f, 0xe0, 0x01, 0xe0, 0x01, 0x00, 0x00 },
    { 0x00, 0x00, 0x80, 0x01, 0xc0, 0x01, 0xe0, 0x01, 0xb0, 0x11, 0x9e, 0x21, 0x8e, 0x45, 0x86, 0x49, 0x86, 0x49, 0x8e, 0x45, 0x9e, 0x21, 0xb0, 0x11, 0xe0, 0x01, 0xc0, 0x01, 0x80, 0x01, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0xfe, 0x7f, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0xfe, 0x7f, 0xfe, 0x7f, 0x80, 0x01, 0x80, 0x01, 0xf0, 0x0f, 0xf0, 0x0f, 0x00, 0x00 },
    { 0x00, 0x00, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x07, 0xfe, 0x7f, 0xfe, 0x7f, 0x06, 0x60, 0x06, 0x60, 0x36, 0x6c, 0xfe, 0x7f, 0xfe, 0x7f, 0x30, 0x0c, 0x30, 0x0c, 0x30, 0x0c, 0x00, 0x00 },
    { 0x80, 0x01, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xfe, 0x7f, 0xff, 0xff, 0x03, 0xc0, 0x03, 0xc0, 0x9b, 0xd9, 0xff, 0xff, 0xfe, 0x7f, 0x98, 0x19, 0x98, 0x19, 0x98, 0x19 },
    { 0x00, 0x00, 0x80, 0x01, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0x60, 0x06, 0x30, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1a, 0x58, 0x31, 0x8c, 0xe4, 0x27, 0xc2, 0x43, 0x10, 0x08, 0x08, 0x10 },
    { 0x00, 0x00, 0xc0, 0x03, 0xe0, 0x07, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0x60, 0x06, 0xec, 0x37, 0xcc, 0x33, 0x1c, 0x38, 0xf8, 0x1f, 0xe0, 0x07, 0x80, 0x01, 0x80, 0x01, 0xe0, 0x07, 0xf0, 0x0f },
    { 0xe0, 0x00, 0xf0, 0x01, 0x18, 0x03, 0x58, 0x7b, 0x58, 0x03, 0x58, 0x03, 0x58, 0x7b, 0x58, 0x03, 0x58, 0x03, 0x4c, 0x66, 0xe6, 0x0c, 0xf6, 0x0d, 0xe6, 0x6c, 0x0c, 0x06, 0xf8, 0x03, 0xf0, 0x01 },
    { 0x00, 0x00, 0x00, 0x06, 0x00, 0x0d, 0x00, 0x0c, 0xfc, 0x0f, 0xfc, 0x07, 0x00, 0x00, 0xfc, 0x0f, 0xfc, 0x3f, 0x00, 0x30, 0xfc, 0x34, 0xfc, 0x1d, 0x80, 0x01, 0x90, 0x01, 0xe0, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0xfc, 0x3f, 0xfe, 0x7f, 0x06, 0x60, 0xf6, 0x6f, 0xf6, 0x6f, 0x06, 0x67, 0x86, 0x63, 0xc6, 0x61, 0xe6, 0x60, 0xf6, 0x6f, 0xf6, 0x6f, 0x06, 0x60, 0xfe, 0x7f, 0xfc, 0x3f, 0x00, 0x00 }
};





void loop() {
  static byte menuSelec = 1;

  u8g2.firstPage();
    do{
        //ROW 1:
        if( menuSelec > 0 )
        {
            u8g2.drawXBMP(4, 2,  14, 14, xMenuUp);
            u8g2.setFont(u8g2_font_haxrcorp4089_tr);
            u8g2.setCursor(22, 13);
            u8g2.print(txtMENU[menuSelec-1]);
        }
 
 
        //ROW 2:
        u8g2.setFont(u8g2_font_nokiafc22_tu);
        u8g2.drawBox(0, 18, 128, 27);
 
        u8g2.setColorIndex(0);
        u8g2.drawXBMP(3, 24, 16, 16, xbmMENU[menuSelec]);
 
        if( strlen(dscMENU[menuSelec]) == 0 ){
            u8g2.drawStr(22, 35, txtMENU[menuSelec]);
        }else{
            u8g2.drawStr(22, 30, txtMENU[menuSelec]);
            u8g2.setFont(u8g2_font_micro_mr);
            u8g2.drawStr(22, 40, dscMENU[menuSelec]);
        }
        u8g2.setColorIndex(1);
 
 
        //ROW 3:
        if( menuSelec < itemsMENU-1 )
        {
            u8g2.drawXBMP(4, 48, 14, 14, xMenuDown);
            u8g2.setFont(u8g2_font_haxrcorp4089_tr);
            u8g2.setCursor(22, 58);
            u8g2.print(txtMENU[menuSelec+1]);
        }
 
 
        u8g2.drawRFrame(0, 0, 128, 64, 5);
    }
    while( u8g2.nextPage() );
    delay(1000);
    menuSelec++;
    if (menuSelec == itemsMENU) menuSelec = 0;
}

